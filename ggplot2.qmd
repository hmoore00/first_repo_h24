---
title: "ggplot2"
format: html
editor: visual
---

```{r}
#| label: setup
library(tidyverse)
```

```{r}
ggplot() +
  geom_point(data = mtcars,
             mapping = aes(
               x = disp,
               y = mpg,
               colour = factor(cyl),
                           size = 3.6*(0.25*1609.347)/qsec,
                           shape = factor(ifelse(am, "Man", "Aut"))
               )
             ) +
  labs(
    colour = "cyl",
    alpha = "speed\n(km/h)", 
    shape = "trans-\nmission")
```

```{r}
ggplot() +
  geom_point(
    data = mtcars,
    mapping = aes(
      x = disp,
      y = mpg, 
      colour = factor(cyl), 
      size = 3.6*(0.25*1609.347)/qsec, 
      shape = factor(
        # Note codeing am
        # 0 automatic, 1 manual
        ifelse(
          am, 
          "Aut", 
          "Man"
          )
        )
      )
    ) +
  labs(
    colour = "cyl", 
    size = "speed\n(km/h)", 
    shape = "trans-\nmission"
    ) +
  geom_smooth(
    formula = 'y ~ x',
    data = mtcars,
    mapping = aes(x = disp, y = mpg),
    level = 0.95
    ) +
  geom_smooth(
    formula = 'y ~ x',
    data = mtcars,
    mapping = aes(x = disp, y = mpg),
    level = 0.99
    )
```

```{r}
## create tibble from scratch
df_mean <-   tibble(
  cyl = c("avg. car 4 cyl.", "avg. car 6 cyl.", "avg. car 8 cyl."), 
  mpg = c(22.66, 17.74, 15.10), 
  disp = c(105.14, 183.31, 353.10)
  )
```

```{r}
p_common <- ggplot(
  data = mtcars, 
  mapping = aes(x = disp, y = mpg)
  ) +
  geom_point(
    aes(colour = factor(cyl))
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  geom_smooth(
    method = MASS::rlm, 
    colour = 'Red', 
    se = FALSE
    ) +
  geom_point(
    data = df_mean, 
    mapping = aes(x = disp, y = mpg), 
    colour = "black", 
    size = 3
    ) +
  theme(legend.position = "bottom")
```

```{r}
p_common
```

```{r}
bp1 <- ggplot() +
  geom_point(
    data = mtcars, 
    mapping = aes(x = hp, y = wt, size = 1609.347/(2*qsec^2)), 
    colour = "blue", 
    alpha = 0.25
    ) +
  geom_text(
    data = mtcars, 
    mapping = aes(x = hp, y = wt, label = rownames(mtcars)),
    colour = "black", 
    size = 2, 
    hjust = 0.5, 
    vjust = 3
    ) +
  labs(size = "Average\nacceleration") +
  scale_size_continuous(
    range = c(1, 10),
    breaks = seq(1, 5, by = 0.25)
    ) +
  theme_classic()
```

```{r}
bp1
```

```{r}
#new dataframe to use for the grey points
hp_acc <- data.frame(
  hp = mtcars$hp, 
  acc = 1609.347/(2*mtcars$qsec^2)
  )

ggplot(
  data = mtcars, 
  mapping = aes(x = hp, y = 1609.347/(2*qsec^2))
  ) +
  geom_point(
    data = hp_acc, 
    mapping = aes(x = hp, y = acc), colour = "grey80"
    ) +
  facet_wrap(
    ~cut_number(
      wt, 
      n =3 , 
      labels = c("Light", "Medium", "Heavy")
      )
    ) +
  geom_point(
    mapping = aes(colour = cut_number(
      wt, 
      n = 3, 
      labels = c("Light", "Medium", "Heavy")
      )
      ),
    show.legend = FALSE
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  labs(
    y = "Mean acceleration (m/s^2)", 
    colour = "Weight"
    )
```

```{r}
ggplot(
  data = mtcars, 
  mapping = aes(x = hp, y = 1609.347/(2*qsec^2))
  ) +
  geom_point(
    data = hp_acc, 
    mapping = aes(x = hp, y = acc), 
    colour = "grey80"
    ) +
  facet_grid(
    factor(cyl)~cut_number(
      wt, 
      n =3 , 
      labels = c("Light", "Medium", "Heavy"))
    ) +
  geom_point(
    mapping = aes(
      colour = cut_number(
        wt, 
        n = 3, 
        labels = c("Light", "Medium", "Heavy")
        )
      ),
    show.legend = FALSE
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  labs(
    y = "Mean acceleration", 
    colour = "Weight"
    )
```

## Quarto

Quarto enables you to weave together content and executable code into a finished document.
To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code.
You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
